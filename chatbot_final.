{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mtheogit/chatbot-final/blob/main/chatbot_final.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5Y-nCwhjMWkz"
      },
      "outputs": [],
      "source": [
        "!pip install -q google-generativeai gradio pillow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c0b59RVgM2M_"
      },
      "outputs": [],
      "source": [
        "import google.generativeai as genai\n",
        "from PIL import Image\n",
        "import gradio as gr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eeamszFLM_a2",
        "outputId": "2182814f-2e8f-4f38-8bed-9fd1b5fb96d4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ðŸ”‘ Digite sua chave da API Gemini (ex: AIza...): AIzaSyA0VPus7WM77XcTeoOz7ZwztNJL0dmZMtI\n"
          ]
        }
      ],
      "source": [
        "chave = input(\"Digite sua chave da API Gemini (ex: AIza...): \").strip()\n",
        "genai.configure(api_key=chave)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "15Ubqix9NHHV"
      },
      "outputs": [],
      "source": [
        "modelo_texto = genai.GenerativeModel(\"gemini-2.5-flash-preview-04-17\")\n",
        "modelo_visao = genai.GenerativeModel(\"gemini-1.5-flash\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "43qUFugBNNQz"
      },
      "outputs": [],
      "source": [
        "def responder(pergunta, imagem):\n",
        "    try:\n",
        "        if not pergunta.strip():\n",
        "            return \"Digite uma pergunta primeiro.\"\n",
        "\n",
        "        if imagem:\n",
        "            resposta = modelo_visao.generate_content([pergunta, Image.open(imagem)])\n",
        "        else:\n",
        "            resposta = modelo_texto.generate_content(pergunta)\n",
        "\n",
        "        return resposta.text\n",
        "\n",
        "    except Exception as erro:\n",
        "        return f\"Erro ao gerar resposta:\\n{erro}\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "eQOyLEJoNcK_",
        "outputId": "1b70b14e-5b64-4fcf-f80f-7a4decbd83fb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "It looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. This cell will run indefinitely so that you can see errors and logs. To turn off, set debug=False in launch().\n",
            "* Running on public URL: https://532f3640aa38347116.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div><iframe src=\"https://532f3640aa38347116.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "css_customizado = \"\"\"\n",
        "body { background-color: #1a1a1a; }\n",
        ".gradio-container { font-family: 'Segoe UI', sans-serif; }\n",
        "h1 { color: #ff4d4d; }\n",
        "label { color: #e6e6e6; }\n",
        "textarea, input[type=\"file\"] {\n",
        "  background-color: #262626;\n",
        "  color: white;\n",
        "  border: 1px solid #ff4d4d;\n",
        "}\n",
        "textarea:focus {\n",
        "  border-color: #ff1a1a;\n",
        "}\n",
        "\"\"\"\n",
        "\n",
        "interface = gr.Interface(\n",
        "    fn=responder,\n",
        "    inputs=[\n",
        "        gr.Textbox(label=\"ðŸ’¬ Pergunta (texto ou sobre uma imagem)\", placeholder=\"Ex: O que vocÃª vÃª nesta imagem?\", lines=2),\n",
        "        gr.Image(type=\"filepath\", label=\"ðŸ–¼ Envie uma imagem (opcional)\")\n",
        "    ],\n",
        "    outputs=gr.Textbox(label=\"ðŸ¤– Resposta da MauMau.IA\"),\n",
        "    title=\"ðŸ”¥ MauMau.IA ðŸ”¥\",\n",
        "    description=\"Seu assistente de IA com suporte a texto e imagem, usando os modelos Gemini.\",\n",
        "    theme=\"default\",\n",
        "    css=css_customizado\n",
        ")\n",
        "\n",
        "interface.launch(debug=True)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO108mUg61HxlUYCyp3r9Y7",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}